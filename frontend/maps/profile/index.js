
import {priceService} from "../services/priceService.js";
import {userService} from "../services/userService.js";
import {libService} from "../services/libService.js";
import {timeService} from "../services/timeService.js";
import {cacheService} from "../services/cacheService.js";
import * as OtbMenuComponent from "../components/menu.component.js";

document.vue = new Vue({
    el: "#adminApp",
    props: [],
    data() {
        return {
            libService:libService,
            timeService:timeService,
            
            // Connection
            connectionLost: false,
            
            // Progress
            stackBarsMax: 0,
            stackBars:[
                {
                    name: "Old",
                    count: 0,
                },
                {
                    name: "Updated",
                    count: 0,
                },
                {
                    name: "Missing",
                    count: 0,
                },
                {
                    name: "Empty",
                    count: 0,
                },
            ],
            
            // Debug
            showDebugMessages: false,
            isDebug: false,
            loading: true,
            debugMessages: [],
            searchText: null,
            sortOrder: 'percent',
            lastSortOrder: null,
            lastSortedTime: 0,
            appStatusBarText: null,
            debugSymbolId: 125,
            
            // Cache
            quick_price_history: [],
            
            // Layout
            bodyHeight: 0,
            isComplexView: false,
            
            // Simulation
            simulationTime: 0,
            isSimulation: false,
            
            // Alerts
            symbols:[],
            priceFrame: null,
            symbolsLeft: 0,
            alertsPriceHistory:[],
            waitingForUI: true,
            chartsToDraw:[],
            performanceMessages: [],
            requests: 0,

            // Navigation
            orderId: null,
            alertId: null,
            balanceId: null,
            backTo: null,
            goToBalanceLink: null,
            hrefBack: null,
            href: null,
            url: null,
            i:0,
            //
            symbolIdsDictionary: [],
            backgroundColor: "rgb(255, 255, 255)",
            info1: true,
            orderStatusLookupItems: [
                //{ id: 0, name: 
                        "undefined",
                //{ id: 1, name: 
                        "New",
                //{ id: 2, name: 
                        "Accepted",
                //{ id: 3, name: 
                        "Filled",
                //{ id: 4, name: 
                        "Canceled" ,
                //{ id: 5, name: 
                        "Rejected" ,
                //{ id: 6, name: 
                        "Missing" ,
                //{ id: 7, name: 
                        "InsufficientBalance"
            ],
            // Common
            env: 'Prod',
            user: null,
            symbol: null,
            progressBar_intervalHandler: null,
            timeAgoHandler: null,
            isLocalhost: window.location.host.indexOf("localhost") >= 0,
            // Balance
            balanceExists: false,
            lastEquityValue: 0,
            cash: 0,
            lastPercentValue: 0,
            balanceHistory: [],
            balanceHistorySeries: null,
            balanceChart: null,
            // Progress
            progressBar_secods: 60,
            progressBar_timeOut: 60,
            progressBar_percent: 100,
            progressBar_blinkCount: 0,
            myVote: null,

            // Orders
            orders: [],
            selectedAlert: null,
            loadingOrders: 0,
            // Navigation
            page: 'voting-help',
            lastPage: null,
            replaceAt: 0,

            alertStateLookupItems: [
                { id: 0, name: "Any", info: "All statuses" } ,
                { id: 1, name: "Waiting", info: "Generated by an instrument" } ,
                { id: 2, name: "Created", info: "Created by hand or triggered by algorithm" } ,
                { id: 3, name: "BuySuggested", info: "Waiting for user confirmation" } ,
                { id: 4, name: "BuyAccepted", info: "Order was accepted" } ,
                { id: 5, name: "BuyCompleted", info: "Waiting for user confirmation" } ,
                { id: 6, name: "BuyRejected", info: "User accepted" } ,
                { id: 7, name: "Expired", info: "Waiting expired, default action taken (e.g. Execute, Wait again or cancel)" } ,
                { id: 8, name: "Retracted", info: "Evaluaued to be retracted by the system as no more relevant" } ,
                { id: 9, name: "SellSuggested", info: "Once executed, the user will later decide to sell" } ,
                { id: 10, name: "SellAccepted", info: "Once executed, the user will later decide to sell" } ,
                { id: 11, name: "SellCompleted", info: "Once executed, the user will later decide to sell" } ,
                { id: 12, name: "SellRejected", info: "Once executed, the user will later decide to sell" } ,
                { id: 13, name: "SoldByUser", info: "Alert closed by user" } ,
                { id: 14, name: "SoldBySystem", info: "Alert closed by algorithms" },
                { id: 15, name: "Disabled", info: "Stop monitoring" } ,
                { id: 16, name: "Deleted", info: "Stop monitoring and hide" } ,
                { id: 17, name: "ResetRequested", info: "Request the server to clear it's view" } ,
                { id: 18, name: "BuyTransmitted", info: "BuyTransmitted" } ,
                { id: 19, name: "BuyCreated", info: "BuyCreated" } ,
                { id: 20, name: "SellTransmitted", info: "SellTransmitted" } ,
                { id: 21, name: "SellCreated", info: "SellCreated" } ,
                { id: 22, name: "Tolerance", info: "???" } ,
                { id: 23, name: "LowAnchor", info: "???" } ,
                { id: 24, name: "CancelTransmitted", info: "???" } ,
                { id: 25, name: "Canceled", info: "???" } ,
            ],
            // Others
            testPrice: 0,
            testSymbol: {
                code: "UAA",
                symbolId: 8053,
                trigger: [0, 8053, 0, 0, 0],
            },
            // Alerts
            lastTimestamp: 0,
            alerts: [],
            // 
            domain: window.location.host.indexOf("localhost") >= 0 ? "localhost:3061" : "stocktech.org:5000",
            qr: {
                value: null,
                size: 160,
                level: 'L',
                background: '#ffffff',
                foreground: '#000000',
                renderAs: 'svg',
            },
            triggers: // [0:SID,1:TID,2:UID,3:ENV,4:BUY,5:SELL,6:PBuy]
                [
                ],
            // Login 
            closingLogin: 0,
            closingClocking: 1,
            showLoginPlaceholder: true,
            showPasswordPlaceholder: true,
            email: null,
            privacyAgreement: false,
            host: (window.location.host.indexOf("localhost") >= 0 ? "local": null),
            isLocal: true || window.location.host.indexOf("localhost") >= 0,
            timeout: 10,
            confirmationChecks: 900,
            loginIntervalHandler: null,
            response: {userMessages:[]},
            userMessage: 'Enter your email',
            userMessageColor: 'orange',
            userConfirmed: false,
            highlightLogin: false,
            qrTimestamp: 0,
            timeLeft: 0,
            showPassword: false,
            password: null,
            setUserIntervalHandler: null,

            // Script Editor
            showScriptEditor: true,
            showLoginForm: true,
            scriptCode: "plot(percent(1.5))",
            // Basic
            width: 1000,
            userWarning: null,
            JWT: null,
            chart: null,
        }
    },
    mounted(){
        var context = this;

        // getPageStatus
        window.getPageStatus_otb_fn = this.getPageStatus_otb_fn;

        // URL
        const urlParams = new URLSearchParams(window.location.search);
        this.url = window.location.search;
        context.debugMessages.push("URL: " + window.location + " ");
        
        document.seHeight = this.seHeight;
        this.bodyHeight = (window.innerHeight + 200) + 'px';
        libService.mounted_otb_fn(this);
        window.setRecentPriceHistory = this.setRecentPriceHistory_otb_fn;
        window.setProgressStackBars = this.setProgressStackBars_otb_fn;
        symbolIdsDictionary = window.symbolIdsDictionary;
        // window.setSymbol({ symbolId: 10, code: "CCL", price: 10.5 });

        var symbolId = urlParams.get("symbolId");
        if(symbolId){
            var code = urlParams.get("code");
            var price = urlParams.get("price");
            this.symbol = { symbolId: parseInt(symbolId), code: code, price: parseFloat(price) };
        }
        var userId = urlParams.get("userId");
        if(userId){
            var token = urlParams.get("token");
            var jwt = urlParams.get("jwt");
            this.user = { userId: parseInt(userId), token: token, jwt: jwt, features: [] };
        }

        var orderId = urlParams.get("orderId");
        if(orderId){
            this.orderId = parseInt(orderId);
        }

        var balanceId = urlParams.get("balanceId");
        if(balanceId){
            this.balanceId = parseInt(balanceId);
        }

        var backTo = urlParams.get("backTo");
        if(backTo){
            this.backTo = backTo;
        }

        var env = urlParams.get("env");
        if(env){
            this.env = env;
            libService.setBackground_otb_fn(this, env, "urlParams");
            this.appStarted_otb_fn();
        }
        userService.restoreUser_otb_fn(context);

        context.debugMessages.push("UserId: " + (this.user ? this.user.userId : '-') + " ");
        
        this.setUserIntervalHandler = setInterval(userService.restoreUser_otb_fn, 400, context);
    },
    computed:{
        filteredSymbols_otb_fn() {
            return (searchText) => {
                if (!this.searchText) {
                    return this.symbols;
                }
                var searchTerm = this.searchText.toLowerCase();
                return this.symbols.filter(item => {
                    return !item.deleted && (!searchTerm
                        || (item.code && item.code.toLowerCase().includes(searchTerm))
                        || (item.info && item.info.toLowerCase().includes(searchTerm)));
                });
            }
        },
        isVisible_otb_fn(){
            return (item, searchText) => {
                if (!this.searchText) {
                    return true;
                }
                var searchTerm = this.searchText.toLowerCase();
                return !item.deleted && (!searchTerm
                    || (item.code && item.code.toLowerCase().includes(searchTerm))
                    || (item.info && item.info.toLowerCase().includes(searchTerm)));
            }
        },
        computePercentage_otb_fn() {
            return (a, b) => {
                return parseInt((a >= b ? a / b : b / a) * 1000000 - 1000000)/10000;
            }
        },
        computeInterval_otb_fn(){
            return (a, b) => {
                var seconds = a-b;
                return timeService.timeSpan_otb_fn(seconds);
            }
        },
    },
    methods: {
            setDummyData_otb_fn(dummyData){
                Object.keys(dummyData).forEach((key)=>{
                    this[key] = dummyData[key];
                    if(key === 'alertsCachedData'){ 
                        this.setRecentPriceHistory_otb_fn(dummyData[key]);
                    }
                });
            },
        // getPageStatus
        getPageStatus_otb_fn(params){
            this.connectionLost = !params.IsConnected;
            return { pageStatus: 2};
        },
        
        // Navigation
        goToSymbol_otb_fn(symbol){
            var context = this;
            context.selectedAlert = symbol;
            context.selectedAlert = symbol;
            context.href = "../transact?side=1&env=" + context.env + "&userId=" + context.user.userId + "&token=" + context.user.token + "&symbolId=" + context.selectedAlert.symbolId + "&code=" + context.selectedAlert.code + "&price=" + context.selectedAlert.price + "&orderId=" + context.selectedAlert.orderId + "&backTo=orders&jwt=" + context.user.jwt;
            window.location = context.href;
            window.location = context.href;
        },
        // LAYOUT
        seHeight_otb_fn(){
            if(document.isTyping){
                var windowHeight = window.innerHeight;
                // this.bodyHeight = (windowHeight - 310) + "px";
            }
            else{
                var windowHeight = window.innerHeight;
                // this.bodyHeight = windowHeight + "px";
            }
        },
        // SORTING
        switchSorting_otb_fn(){
            this.sortOrder = this.sortOrder == 'code' ? 'percent' : 'code'
        },
        updateSorting_otb_fn(){
            if(this.lastSortOrder === this.sortOrder && this.lastSortedTime + 1000 > Date.now()){
                return;
            }
            this.lastSortedTime = Date.now();
            this.lastSortOrder = this.sortOrder;
            switch (this.sortOrder) {
                case 'code':
                    this.symbols = this.symbols.sort(this.SortDescByCode_otb_fn);
                    break;
                case 'percent':
                    this.symbols = this.symbols.sort(this.SortDescByPercent_otb_fn);
                    break;
            }
        },
        SortDescByCode_otb_fn( aa, bb ) {
            return (aa.code < bb.code) ? -1 : (aa.code > bb.code) ? 1 : 0;
        },
        SortDescByPercent_otb_fn( aa, bb ) {
            return (aa.percent < bb.percent) ? -1 : (aa.percent > bb.percent) ? 1 : 0;
        },
        setProgressStackBars_otb_fn(stats){
            /*
            return new PriceHistoryStats:                
            AllCount
            MissingCount
            EmptyCount
            OldCount                
             */
            if(stats){
                if(!this.stackBars.length){
                    this.stackBars.push({ name: "Old", count: stats.OldCount });
                    this.stackBars.push({ name: "Updated", count: stats.AllCount - (stats.MissingCount + stats.OldCount + stats.EmptyCount) });
                    this.stackBars.push({ name: "Missing", count: stats.MissingCount });
                    this.stackBars.push({ name: "Empty", count: stats.EmptyCount });
                }
                this.stackBars[0].count = stats.OldCount;
                this.stackBars[1].count = stats.AllCount - (stats.MissingCount + stats.OldCount + stats.EmptyCount);
                this.stackBars[2].count = stats.MissingCount;
                this.stackBars[3].count = stats.EmptyCount;
                // if(!this.stackBarsMax)
                {
                    this.stackBarsMax = stats.AllCount;
                }
            }
            return 1;
        },
        setRecentPriceHistory_otb_fn(alerts, forceWaiting){
            var context = this;
            context.debugMessages.push("Received RecentPriceHistory: " + (alerts.length) + " " + (alerts.length? alerts[0].data ? alerts[0].data[0] : 'nod' :'') +  "");
            if(true) // context.waitingForUI && !forceWaiting)
            {
                alerts.forEach(alert => {
                    if(alert.symbolId === this.debugSymbolId){
                        var x = alert.data.length;
                    }
                    alert.length = alert.data.length;
                    var existentChart = context.chartsToDraw.find(p=>p.symbolId === alert.symbolId);
                    if(existentChart){
                        existentChart.data = alert.data;
                    }
                    else
                    {
                        context.chartsToDraw.push(alert);
                        context.alertsPriceHistory.push(alert);
                    }
                });


                context.loadingOrders = context.chartsToDraw.filter(p=>p.data).length;
                context.debugMessages.push("WaitingForUI: " + (context.chartsToDraw.length) );
                context.debugMessages.push("Lengths: " + (alerts.map(p=> p.symbolId + ":" + p.length)));
                return alerts.map(p=> p.symbolId).join(",");
            }
            else
            {
                /*
                context.debugMessages.push("Direct: " + (alerts.length) + " ");
                context.debugMessages.push("Lengths: " + (alerts.map(p=>p.data.length)));
                alerts.forEach(alert => {
                    var symbol = context.symbols.find(p=>p.symbolId === alert.symbolId);
                    if(symbol) {
                        if(!symbol.ticks) {
                            symbol.ticks = alert.data;
                        }
                        context.drawSymbolSparkline_otb_fn(symbol, alert.data);
                    }
                    else{
                        context.debugMessages.push("missing symbol: " + (alert.symbolId) + " ");
                    }
                    context.alertsPriceHistory.push(alert);
                });
                 */
            }
            return alerts.map(p=> p.symbolId).join(",");
        },
        selectAlert_otb_fn(alert){
            var context = this;
            this.selectedAlert = alert;
            if(alert) {
                context.orderId = alert.alertId;
                context.goToBalanceLink = "../balance?env=" + context.env + "&userId=" + context.user.userId + "&token=" + context.user.token + "&symbolId=" + context.selectedAlert.symbolId + "&code=" + context.selectedAlert.code + "&price=" + context.selectedAlert.price + "&orderId=" + context.selectedAlert.orderId + "&balanceId=" + context.selectedAlert.balanceId + "&backTo=orders&jwt=" + context.user.jwt;
                context.href = "../symbol?env=" + context.env + "&userId=" + context.user.userId + "&token=" + context.user.token + "&symbolId=" + context.selectedAlert.symbolId + "&code=" + context.selectedAlert.code + "&price=" + context.selectedAlert.price + "&orderId=" + context.selectedAlert.orderId + "&backTo=orders&jwt=" + context.user.jwt;
                priceService.fetchRealTimePrice_otb_fn(this.selectedAlert);
            }
            else{
                context.alertId = null;
            }
        },
        appStarted_otb_fn(){
            
            clearInterval(this.setUserIntervalHandler);
            var context = this;

            // if(window.location.host.indexOf("localhost") < 0) 
            {
                context.debugMessages.push("appStarted_otb_fn: HTTP requests only on localhost. Host: " + window.location.host);
            }
            
            Vue.nextTick(function () {
                if (context.$refs.appMenu) {
                    context.$refs.appMenu.updateMenu_otb_fn(context);
                }
            });
            if(this.env === "Dev"){
                // this.symbols.push(this.testSymbol);
            }

            var cachedItems = cacheService.load_otb_fn("/quick_price_history")
                .then(items => {
                    context.debugMessages.push("cacheService: has " + items.length + " quick_price_history");
                    context.quick_price_history = items.map(p=> { return { symbolId: p.id, data: p.value }});
                    context.appStatusBarText = "cacheService found " + context.quick_price_history.length + " items";
                    this.loadSymbolsDictionary_otb_fn();
                })
                .catch(err => {
                    this.loadSymbolsDictionary_otb_fn();
                    context.debugMessages.push("cacheService: has no quick_price_history");
                    return 0;
                });


            context.debugMessages.push("appStarted: getBalance");
            this.getBalance_otb_fn();
            context.debugMessages.push("appStarted: getAlerts");
            this.getAlerts_otb_fn();
            context.debugMessages.push("appStarted: pullPrices");
            this.pullPrices_otb_fn();
            setInterval(() => this.pullPrices_otb_fn(), context.isSimulation ? 100 : 5000);
            this.hrefBack = "../"+this.backTo+"?env="+this.env+'&userId='+this.user.userId+'&token='+this.user.token+'&symbolId='+(this.symbol ? this.symbol.symbolId : 0)+'&code='+(this.symbol ? this.symbol.code : null)+'&price='+(this.symbol ? this.symbol.price : 0)+'&orderId='+this.orderId+'&balanceId='+this.balanceId+'&backTo=orders&jwt='+this.user.jwt;

            // this.progressBar_intervalHandler = setInterval(() => this.updateProgressBar(), 1000);
            this.timeAgoHandler = setInterval(() => {
                timeService.updateTimeAgo_otb_fn(context);
            }, 500, context);
        },
        getBalance_otb_fn(){
            var context = this;
            this.info1 = !this.info1;
            return;
            var model = {};
            var resolvedEndpoint = "https://" + this.domain + "/api/balance/" + this.env + "/" + this.user.token + "/alpaca/AccountInfo";
            $.ajax({
                headers: {
                    "Authorization": "Bearer "  + this.user.jwt,
                },
                url: resolvedEndpoint,
                dataType: "json",
                type: "POST",
                data: JSON.stringify(model),
                contentType: "application/json",
                success: function(json){
                    if(json) {
                        context.balanceExists = true;
                        context.lastEquityValue = json.equity;
                        context.cash = json.cash;
                        context.lastPercentValue = Math.round(1000 - ((json.last_equity / json.equity) * 1000)) / 10;
                    }
                }
            });
        },

        updateRecentPrices_otb_fn(index, symbol){
            var context = this;
            if(context.isSimulation)
            {
                var ticks = this.generate_TPV_Array_otb_fn(300);
                symbol.ticks = ticks;
                context.drawSymbolSparkline_otb_fn(symbol, ticks.map(p=>p[1]));
                return;
            }

            // TRY FROM CACHE
            var cacheData = context.quick_price_history.find(p=>p.symbolId == symbol.symbolId);
            if(cacheData)
            {
                context.drawSymbolSparkline_otb_fn(symbol, cacheData.data);
                return;
            }

            context.requests++;
            if(context.requests > 50){
                return;
            }
            if(window.location.host.indexOf("localhost") < 0) {
                return 0;
            }
            context.appStatusBarText = "Fetching... " + symbol.code + "";
            
            // Is localhost
            $.ajax({
                // url: (this.status.skipApiCalls ? "selections.json" : "https://"+context.main_host+":4105/api/intervals/Prod/Flo/collect/" + symbol.symbolId + "/last_month"),
                headers: {
                    "Authorization": "Bearer "  + this.user.jwt,
                },//  https://stocktech.org:5000/api/processor/Prod/Flo/collect/symbolIds/42,50,55/recent_price_history
                url: "https://stocktech.org:5000/api/processor/Prod/Flo/collect/symbolIds/" + symbol.symbolId + "/recent_price_history",
            }).done(function (data) {
                data = data[symbol.symbolId];
                symbol.data = data;
                if(!data.length) return;
                var ticks = data;                    
                var ticksArray = ticks;
                cacheService.save_symbol_artefact_otb_fn("quick_price_history", symbol.symbolId, data);
                context.drawSymbolSparkline_otb_fn(symbol, ticksArray);
            }).fail(function(xhr, status, error) {
                console.log("error");
            });
        },
        generateIntArray_otb_fn(len){
            return [...Array(len)].map(e=>Math.random()*100);
        },
        generate_TPV_Array_otb_fn(len){
            return [...Array(len)].map(e=> [0, Math.random()*100]);
        },
        generatePriceArray_otb_fn(symbols, time){
            return symbols.map(symbol => { return [symbol.symbolId, time, !symbol.ticks ? Math.random()*100 : symbol.ticks[symbol.ticks.length-1][1] + (Math.random()*10-5), 0] });
        },
        drawSymbolSparkline_otb_fn(symbol, ticksArray){
            var context = this;
            context.symbolsLeft--;
            this.loading = context.symbolsLeft > 0;
            symbol.loaded = true;
            // symbol.ticks = ticksArray;
            context.$nextTick(() => {
                if(symbol.symbolId == context.debugSymbolId){
                   // context.debugMessages.push("...: " + symbol.symbolId + "-" + ticksArray.length);
                }
                // $('#ch_' + symbol.symbolId + '_1').sparkline(ticksArray, {type: 'line', lineColor: 'red', width: '150px', height: '50px', minValue: 0});
                // $('#tg_' + symbolId + '_0').html(timeService.timeAgo_otb_fn(data[data.length-1][0]));
                // $('#tp_' + symbol.symbolId + '_0').html(context.computePercent_otb_fn(ticksArray));
                // $('#td_' + symbol.symbolId + '_0').html(context.computeDuration_otb_fn(ticksArray));
                // $('#lud_' + thisSymbol.symbolId).html('Updated ' + timeService.timeAgo_otb_fn(data[data.length-1][0]) + ' ago');
            });
        },
        initSymbols_otb_fn(symbolIds) {
            // this.symbols = symbolIds.map(symbolId => { return { symbolId: symbolId, code: 'test' }});
            this.symbols = symbolIds.map(symbolId => { return { symbolId: symbolId, code: this.symbolCodeFromId_otb_fn(symbolId), data: [], loaded: false }});
            this.symbolsLeft = this.symbols.length;
            this.buildSymbols_otb_fn(this);
        },
        computePercent_otb_fn(ticks, symbol){
            if(!ticks.length){
                return;
            }
            var values = ticks.map(p=>p[1]);
            var min = Math.min(...values);
            var max = Math.max(...values);
            var percent = Math.round(1000 - ((min / max) * 1000)) /10;
            if(symbol){
                symbol.percent = percent;
            }
            return percent;
        },
        computeDuration_otb_fn(ticks, symbolId){
            if(!ticks.length){
                return;
            }
            var seconds = ticks[ticks.length-1][0] - ticks[0][0];
            $('#ch_' + symbolId + '_1').sparkline(ticks.map(p=>p[1]), {type: 'line', lineColor: 'red', width: '61px', height: '50px', minValue: 0});
            return this.duration_otb_fn(seconds);
        },
        duration_otb_fn(seconds) {
            if (!seconds) {
                return '-';
            }

            else if (seconds > 604800) {
                return parseInt(seconds / 604800) + " w";
            }
            else if (seconds > 86400) {
                return parseInt(seconds / 86400) + " days";
            }
            else if (seconds > 3600) {
                return parseInt(seconds / 3600) + " h";
            }
            else if (seconds > 60) {
                return parseInt(seconds / 60) + " min";
            }
            else {
                return parseInt(seconds) + " sec";
            }
        },
        symbolCodeFromId_otb_fn(symbolId){
            var symbol = this.knownSymbolsArray.find(p=>p.symbolId === symbolId);
            return symbol ? symbol.code : '-';
        },
        buildSymbols_otb_fn(context) {
            context.$nextTick(() => {
                var i = 0;
                context.waitingForUI = false;
                var items = 0;
                var requests = 0;
                context.symbols.forEach((p, index)=>{
                    // if(index >= context.pageSize) return;
                    // if(window.location.host.indexOf("localhost") >= 0) 
                    {
                        requests++;
                        var res = context.updateRecentPrices_otb_fn(index, context.symbols[index]);
                        items += res;
                    }
                });
                // context.debugMessages.push("Recreated: " + (items) + " ");
                // if(context.symbols.map(p=>p.symbolId).indexOf(context.selectedSymbol_0.symbolId) == -1)
                {
                    // context.loadSymbol(0, context.symbols[i]);
                    i++;
                }

                // context.updateLastLastPrice_LastMonth_otb_fn();
                // context.updateLastLastPrice_LastYear_otb_fn();
            });
        },
        loadSymbolsDictionary_otb_fn() {
            var context = this;
            $.ajax({
                url: "symbols.json",
            }).done(function (data) {
                context.symbolIdFromCode = data;
                context.knownSymbolsArray = context.symbolDictionaryToObjectsArray_otb_fn(data);
                context.symbolIds = context.knownSymbolsArray.map(p=> { return p.symbolId } );
                context.initSymbols_otb_fn(context.symbolIds);
            }).fail(function(xhr, status, error) {
                console.log("error" + error);
            });
        },
        symbolDictionaryToObjectsArray_otb_fn(symbolsDictionary){
            return Object.keys(symbolsDictionary).map((p, v)=> {
                return { symbolId: symbolsDictionary[p], code: p }
            });
        },
        
        pullPrices_otb_fn(){ // return;
            var context = this;
            if(!context.symbols.length){
                context.debugMessages.push("(pullPrices)... waiting" + " vv ");
                return;
            }
            // context.debugMessages.push("(pullPrices) +++ " + " ");

            try {
                if (context.chartsToDraw.length && context.symbols.length) {
                    context.chartsToDraw.forEach(alert => {
                        if(alert.symbolId == context.debugSymbolId) {
                            var x = 0;
                        }
                        try
                        {
                            if (alert.data) {
                                var symbol = context.symbols.find(s => s.symbolId === alert.symbolId);
                                if (alert.symbolId == context.debugSymbolId && alert.data) {
                                    context.debugMessages.push("(drawing)... " + alert.symbolId + ":" + (alert.data ? alert.data.length : alert.length) + " SID:" + (symbol ? symbol.symbolId + ":" + (symbol.ticks ? symbol.ticks.length : '0') + " " : ' s?') + " ");
                                }
                                if (symbol) {
                                    symbol.ticks = alert.data;
                                    alert.length = alert.data.length;
                                    alert.ago = alert.data[alert.data.length - 1][0];
                                    symbol.ago = alert.ago;
                                    alert.data = null;
                                    context.drawSymbolSparkline_otb_fn(symbol, symbol.ticks);
                                }
                            }
                        }
                        catch(ex){
                            var x = ex;
                        }
                    });
                    context.loadingOrders = context.chartsToDraw.filter(p=>p.data).length;
                }

                // context.debugMessages.push("(pullPrices)... " + " vv ");
                if (context.isSimulation) {
                    var prices = context.generatePriceArray_otb_fn(context.symbols, context.simulationTime);
                    context.appendRealTimePrices_otb_fn(context, prices, true); // Append or update
                    context.updateSorting_otb_fn();
                    return;
                }

                var url = "https://stocktech.org:5000/api/symbol/" + this.env + "/Flo/prices"; // [[S,t,P,V]]
                $.ajax({
                    // url: (this.useFileResources ? "selections.json" : "https://"+context.main_host+":4107/api/prices"),
                    headers: {
                        "Authorization": "Bearer " + this.user.jwt,
                    },
                    url: url
                }).done(function (data) {
                    // context.debugMessages.push("(pullPrices) null " );
                    if (!data.length) return;
                    context.priceFrame = data;
                    context.prices = data;
                    // context.debugMessages.push("(pullPrices) ok: " + context.prices.length + " ");
                    context.appendRealTimePrices_otb_fn(context, data, true); // Append or update

                    context.updateSorting();
                }).fail(function (xhr, status, error) {
                    // context.debugMessages.push("(pullPrices) error: " + status + " - " + error + " " + url);
                    console.log("(pullPrices)  error");
                });
            }
            catch (e) {
                // context.debugMessages.push("(pullPrices) EXCEPTION: " + e + " ");
            }
        },
        appendRealTimePrices_otb_fn(context, prices, append){
            prices.forEach(price => {
                var symbol = context.symbols.find(p=>p.symbolId === price[0]);
                if(symbol) {
                    if(!symbol.ticks || !symbol.ticks.length){
                        symbol.ticks = [[price[1], price[2]]];
                    }
                    var lastPrice = symbol.ticks[symbol.ticks.length-1];
                    if(symbol.ticks.length > 1 && lastPrice[1] == price[2]){
                        return;
                    }
                    symbol.ticks.push([price[1], price[2]]);
                    symbol.ticks = symbol.ticks.slice(-50);
                    context.drawSymbolSparkline_otb_fn(symbol, symbol.ticks.map(p=>p[1]));
                }
            });
        },
        getAlerts_otb_fn(){
            var context = this;
            context.alerts = [{}];
            return;
            this.i=13;
            var resolvedEndpoint = "https://" + this.domain + "/api/pushNotification/Prod/" + this.user.token + "/list/20/from/0";
            context.debugMessages.push("getAlerts: " + this.env + " " + (this.user ? this.user.token : -1) + " " + (this.user ? this.user.jwt != 'undefined' : -1) + " " + resolvedEndpoint);
            $.ajax({
                headers: {
                    "Authorization": "Bearer "  + this.user.jwt,
                },
                url: resolvedEndpoint,
                dataType: "json",
                contentType: "application/json",
                success: function(json) {
                    // context.debugMessages.push(JSON.stringify(json));
                    context.i = 14;
                    if (json) {
                        json.forEach(p=>{
                            p.code = symbolIdsDictionary[p.symbolId];
                        })
                        context.alerts = json;
                        // context.debugMessages.push("getAlerts: " + (json.length) + " ");
                    }
                    else{
                        // context.debugMessages.push("getAlerts: is empty");
                    }
                    // context.loadingOrders = false;
                    if (context.alertId) {
                        context.i = 15;
                        var selectedAlert = context.alerts.find(p => p.alertId === context.alertId);
                        if (selectedAlert) {
                            context.i = 16;
                            context.selectOrder_otb_fn(selectedAlert);
                        }
                    }
                }
            }).fail(function(xhr, status, error) {
                var errorMessage = xhr.status + ': ' + xhr.statusText;
                // context.debugMessages.push("(getAlerts) error: " + errorMessage + " ");
            });
        },

        // Login
    }
});